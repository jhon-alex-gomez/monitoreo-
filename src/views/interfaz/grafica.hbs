<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Gráfica IoT por rango reciente</title>
  

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@1.0.0/dist/chartjs-plugin-zoom.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    .chart-container {
      width: 100%;
      height: 500px; /* Hacerla más grande */
      margin: auto;
    }
    .gauges {
      display: flex;
      justify-content: center;
      gap: 50px;
      margin-top: 50px;
    }
    .gauge-box {
      text-align: center;
    }
    canvas {
      width: 100% !important; /* Hacer que el gráfico ocupe todo el contenedor */
      height: 400px !important; /* Ajustar altura */
    }
  </style>
</head>
<body>

  <h2 style="text-align: center;">Visualización de Datos IoT</h2>
  <h3 style="text-align: center;">Consumo Total: <span id="total-consumo"></span></h3>

  <div style="text-align: center; margin-bottom: 20px;">
    <label for="rango">Mostrar datos de la:</label>
    <select id="rango">
      <option value="hora">Última hora</option>
      <option value="dia">Último día</option>
      <option value="semana">Última semana</option>
      <option value="mes">Último mes</option>
      <option value="todos">Todos los datos</option>
    </select>
  </div>

  <div class="chart-container">
    <canvas id="consumoChart"></canvas>
  </div>

  <div class="gauges">
    <div class="gauge-box">
      <canvas id="voltajeGauge"></canvas>
    </div>
    <div class="gauge-box">
      <canvas id="corrienteGauge"></canvas>
    </div>
  </div>

  <script>
    const consumoData = {{{cons}}};
    const volt = {{{volt}}};
    const cor = {{{cor}}};
    const fechasISO = {{{fecha}}}; // ejemplo: ["2025-05-08T20:30:00Z", ...]

    const total = "{{{totalConsumo}}}"; // o puedes ponerlo entre comillas si es string
    document.getElementById('total-consumo').textContent = total + ' W';

    function filtrarPorRango(fechas, datos, tipo) {
      const ahora = dayjs();
      let inicio;

      switch (tipo) {
        case 'hora': inicio = ahora.subtract(1, 'hour'); break;
        case 'dia': inicio = ahora.subtract(1, 'day'); break;
        case 'semana': inicio = ahora.subtract(1, 'week'); break;
        case 'mes': inicio = ahora.subtract(1, 'month'); break;
        default: return {
          labels: fechas.map(f => dayjs(f).format('DD/MM HH:mm')),
          valores: datos
        };
      }

      const filtrados = fechas
        .map((f, i) => ({ fecha: dayjs(f), valor: datos[i] }))
        .filter(d => d.fecha.isAfter(inicio));

      const labels = filtrados.map(d => d.fecha.format('DD/MM HH:mm'));
      const valores = filtrados.map(d => d.valor);

      return { labels, valores };
    }

    const ctx = document.getElementById('consumoChart').getContext('2d');
    let grafico;

    function renderGrafico(tipoRango) {
      const filtrado = filtrarPorRango(fechasISO, consumoData, tipoRango);

      if (grafico) grafico.destroy();

      grafico = new Chart(ctx, {
        type: 'line',
        data: {
          labels: filtrado.labels,
          datasets: [{
            label: 'Consumo (W)',
            data: filtrado.valores,
            borderColor: 'blue',
            backgroundColor: 'rgba(0, 123, 255, 0.1)',
            fill: true,
            tension: 0.3,
            pointRadius: 5,
            pointHoverRadius: 10,
            pointHoverBackgroundColor: 'red'
          }]
        },
        options: {
          responsive: true,
          plugins: {
            title: {
              display: true,
              text: `Consumo en ${tipoRango === 'todos' ? 'todo el período' : 'la última ' + tipoRango}`
            },
            legend: {
              display: true
            }
          },
          scales: {
            x: {
              ticks: {
                maxRotation: 45,
                minRotation: 45,
                autoSkip: true,
                maxTicksLimit: 15
              }
            },
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  return value + ' W'; // Mostrar unidades en el eje Y
                }
              }
            }
          },
          zoom: {
            enabled: true,
            mode: 'xy',
            speed: 0.1
          }
        }
      });
    }

    document.getElementById('rango').addEventListener('change', function () {
      renderGrafico(this.value);
    });

    renderGrafico('hora'); // por defecto

   // Indicadores
const ultimoVolt = volt[volt.length - 1] || 0;
const ultimoCor = cor[cor.length - 1] || 0;

new Chart(document.getElementById('voltajeGauge'), {
  type: 'doughnut',
  data: {
    labels: ['Voltaje', 'Resto'],
    datasets: [{
      data: [ultimoVolt, 220 - ultimoVolt], // Asegúrate que 220 sea el valor máximo
      backgroundColor: ['orange', '#eee'],
      borderWidth: 1
    }]
  },
  options: {
    cutout: '80%',
    rotation: 3 * Math.PI / 2,
    plugins: {
      title: {
        display: true,
        text: `Voltaje: ${ultimoVolt} V`
      },
      legend: { display: false }
    },
    responsive: true
  }
});




new Chart(document.getElementById('corrienteGauge'), {
  type: 'doughnut',
  data: {
    labels: ['Corriente', 'Resto'],
    datasets: [{
      data: [ultimoCor, 30 - ultimoCor],
      backgroundColor: ['green', '#eee'],
      borderWidth: 1
    }]
  },
  options: {
    cutout: '80%',
    rotation: -0.5 * Math.PI, // Esto hace que el gráfico comience desde la mitad izquierda (180 grados)
    plugins: {
      title: {
        display: true,
        text: `Corriente: ${ultimoCor} A`
      },
      legend: { display: false }
    }
  }
});

  </script>

</body>
</html>

